import requests

url = "https://model.9497924.dedicated.h2o.ai/b2ddfa66-9e36-474a-ae5c-3b19009ea60c/model/score"
headers = {
    "Content-Type": "application/json",
    "Authorization": "Bearer xSxzLqCHCxww8wPE0Zl7Ur9sEsIcNHNAXMFG9deZZug"
}

payload = {
    "fields": [
        "Age Bucket v2",
        "AnyPriorDelinquentEvent",
        "Auth_User_Purchaser",
        "Average Initial Failure Rate",
        "CCBalances",
        "CCDebtLoad",
        "ClearID_TotalScore",
        "Credit Score Bucket",
        "Driving Record Company Score",
        "Driving Record Gender",
        "Driving Record Total State Points",
        "First Order Initial Mileage Plan",
        "FirstPartyFraud",
        "Gender First Name Estimated",
        "Gross Order Count",
        "Has Active Membership",
        "Has Open Order",
        "IDTheft",
        "Market Name",
        "Mileage Bucket",
        "Mileage Plan at Order",
        "Month of Creation Date",
        "Most Recent Mileage Plan",
        "Net Order Count",
        "Num Invoices Deposit Applied",
        "Num Maintenance Swaps",
        "Num Preference Swaps",
        "Num Referrals Who Completed",
        "Num Referrals Who Redeemed",
        "Percent Active",
        "PriorAuto_AllInGoodStanding",
        "PriorAuto_AtLeastOneGoodStanding",
        "PriorAuto_AtLeastOneMajorDelinquency",
        "PriorAuto_AtLeastOnePastDue",
        "PriorAuto_Chargeoff",
        "PriorCC_AllInGoodStanding",
        "PriorCC_AtLeastOneMajorDelinquency",
        "PriorCC_AtLeastOnePastDue",
        "PriorCC_Chargeoff",
        "Reason for No Driving Record",
        "Repo Process Started",
        "Requested Vehicle Make",
        "RiskInform_TotalScore",
        "Total Deposit Amount",
        "Total Invoices With Initial Payment Failed",
        "Total Uncollected Revenue",
        "TotalDebtLoad",
        "TotalMinimumPayment",
        "Vehicle Fee Bucket at Order",
        "braking_per_1000miles",
        "cornering_per_1000miles",
        "density",
        "drivingEvent_per_1000miles",
        "population",
        "score_basket",
        "score_mean",
        "score_q1_vs_mean",
        "score_q3_vs_mean",
        "score_std",
        "season",
        "speeding_per_1000miles",
        "vehivel_request_fufillment"
    ],
    "rows": [
        [
            "25-34",
      0,
      0,
      0.0,
      18127.0,
      0.9540526316,
      100.0,
      "[580-669] Fair",
      0.0,
      "FEMALE",
      None,
      "850 miles",
      0.0,
      "Female",
      1,
      "yes",
      "yes",
      17.0,
      "New England",
      "500-850 miles/month",
      "850 miles",
      5.0,
      "850 miles",
      1,
      0,
      0,
      0,
      0,
      1.0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      None,
      "no",
      "Toyota",
      0.0,
      0.0,
      0,
      0.0,
      0.9671688517,
      520.0,
      "$200-$299",
      None,
      None,
      839.8,
      None,
      3196.0,
      3,
      0.8096774194,
      -0.0096774194,
      0.0503225806,
      0.062529133,
      "Spring",
      None,
      True
        ]
    ]
}

if __name__ == '__main__':
    response = requests.post(url, headers=headers, json=payload)
    print(response)